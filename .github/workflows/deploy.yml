name: Deploy to Server

on:
  push:
    branches: [main] # Der Workflow wird bei jedem Push auf den main-Branch ausgelöst

jobs:
  deploy:
    runs-on: ubuntu-latest # Führt den Job auf einem Ubuntu-Runner (GitHub Actions VM) aus

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Holt den Code aus deinem GitHub Repository

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Installiert Node.js auf dem Runner
        with:
          node-version: "20" # Verwendet Node.js Version 20

      - name: Install dependencies and build frontend
        run: |
          cd frontend # Wechselt in das 'frontend'-Verzeichnis deines Repositories
          npm install # Installiert alle Abhängigkeiten für dein Frontend
          npm run build # Führt den Build-Befehl aus (erstellt den 'dist' Ordner mit den statischen Dateien)

      - name: Prepare target directory on server
        uses: appleboy/ssh-action@v1.0.3 # Stellt eine SSH-Verbindung zu deinem Homeserver her
        with:
          host: ${{ secrets.SERVER_IP }} # Die IP-Adresse (oder DynDNS-Domain) deines Servers, aus GitHub Secrets
          username: ${{ secrets.SERVER_USER }} # Der Benutzername auf deinem Server (z.B. 'robin'), aus GitHub Secrets
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Der private SSH-Schlüssel für die Authentifizierung, aus GitHub Secrets
          script: |
            # Navigiert zum Webroot-Verzeichnis auf deinem Homeserver
            cd /var/www/vhosts/eppelstyle.de/html || { echo "Error: Target directory /var/www/vhosts/eppelstyle.de/html not found. Please create it on the server."; exit 1; }
            # Löscht alle vorhandenen Dateien und Unterordner im Webroot (WICHTIG!)
            sudo rm -rf * # So stellst du sicher, dass keine alten Dateien oder der 'frontend'-Ordner übrig bleiben
            # Optional: Wenn du versteckte Dateien wie .git oder .github im Build-Ordner hast
            # sudo rm -rf .[a-zA-Z0-9]*

      - name: Copy build files to server
        uses: appleboy/scp-action@v0.1.4 # Kopiert die gebuildeten Dateien über SCP auf deinen Server
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "frontend/dist/" # Quellpfad des 'dist'-Ordners
          target: "/var/www/vhosts/eppelstyle.de/html" # Zielverzeichnis auf deinem Server
          # WICHTIG: Füge strip_components hinzu, um den 'frontend/dist' Teil des Pfades zu entfernen
          # Dies stellt sicher, dass der INHALT von dist direkt in das Zielverzeichnis kopiert wird
          strip_components: 2 # Entfernt 'frontend/' und 'dist/' von der Quelle

      - name: Set correct permissions for Nginx and Reload
        uses: appleboy/ssh-action@v1.0.3 # Erneute SSH-Verbindung, um Dateiberechtigungen anzupassen
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigiert zum Webroot-Verzeichnis
            cd /var/www/vhosts/eppelstyle.de/html || { echo "Error: Target directory /var/www/vhosts/eppelstyle.de/html not found for permissions setup."; exit 1; }
            # Setzt den Besitzer der hochgeladenen Dateien und Verzeichnisse rekursiv auf robin:www-data
            sudo chown -R robin:www-data .
            # Setzt die Berechtigungen: 755 für Verzeichnisse, 644 für Dateien
            sudo find . -type d -exec chmod 755 {} \;
            sudo find . -type f -exec chmod 644 {} \;
            # Nginx neu laden, um sicherzustellen, dass es die neuen Dateien und deren Berechtigungen schnellstmöglich erkennt
            sudo systemctl reload nginx

      - name: Purge Cloudflare Cache (using curl)
        if: success() # Dieser Schritt wird nur ausgeführt, wenn alle vorherigen Schritte erfolgreich waren
        uses: appleboy/ssh-action@v1.0.3 # Nutzen wir erneut die SSH-Action für den Curl-Befehl
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Führt den Curl-Befehl aus, um den Cloudflare-Cache zu leeren
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
